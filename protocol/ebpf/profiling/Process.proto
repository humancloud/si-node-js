/*!
 *
 * Copyrights to StackInsights
 * All rights are reserved 2019
 *
 */

syntax = "proto3";

package stackinsights.v3;

option java_multiple_files = true;
option java_package = "org.apache.stackinsights.apm.network.ebpf.profiling.process.v3";
option go_package = "stackinsights.apache.org/repo/goapi/collect/ebpf/profiling/process/v3";

import "common/Common.proto";

// Define the detected processes and report them.
service EBPFProcessService {
    // Report discovered process in Rover
    rpc reportProcesses (EBPFProcessReportList) returns (EBPFReportProcessDownstream) {
    }

    // Keep the process alive in the backend.
    rpc keepAlive (EBPFProcessPingPkgList) returns (Commands) {
    }
}

message EBPFProcessReportList {
    repeated EBPFProcessProperties processes = 1;
    // An ID generated by eBPF agent, should be unique globally.
    string ebpfAgentID = 2;
}

message EBPFProcessProperties {
    // The Process metadata
    oneof metadata {
        EBPFHostProcessMetadata hostProcess = 1;
        EBPFKubernetesProcessMetadata k8sProcess = 2;
    }
}

message EBPFHostProcessMetadata {
    // [required] Entity metadata
    // Must ensure that entity information is unique at the time of reporting
    EBPFProcessEntityMetadata entity = 1;
    // [required] Process full command line
    string cmd = 2;
    // [required] The IP address of the host where the process resides
    string hostIP = 3;
    // [required] The Process id of the host
    int32 pid = 4;
}

// Process Entity metadata
message EBPFProcessEntityMetadata {
    // [required] Process belong layer name which define in the backend
    string layer = 1;
    // [required] Process belong service name
    string serviceName = 2;
    // [required] Process belong service instance name
    string instanceName = 3;
    // [required] Process name
    string processName = 4;
}

// [WIP] Kubernetes process metadata
message EBPFKubernetesProcessMetadata {
}

message EBPFReportProcessDownstream {
    repeated EBPFProcessDownstream processes = 1;
}

message EBPFProcessDownstream {
    // Generated process id
    string processId = 1;
    // Locate the process by basic information
    oneof process {
        EBPFHostProcessDownstream hostProcess = 2;
        EBPFKubernetesProcessDownstream k8sProcess = 3;
    }
}

message EBPFHostProcessDownstream {
    int32 pid = 1;
}

// [WIP] Kubernetes process downstream
message EBPFKubernetesProcessDownstream {
}

message EBPFProcessPingPkgList {
    repeated EBPFProcessPingPkg processes = 1;
}

message EBPFProcessPingPkg {
    // Process entity
    EBPFProcessEntityMetadata entityMetadata = 1;
}
