/*!
 *
 * Copyrights to StackInsights
 * All rights are reserved 2019
 *
 */

syntax = "proto3";

package stackinsights.v3;

option java_multiple_files = true;
option java_package = "org.apache.stackinsights.apm.network.servicemesh.v3";
option csharp_namespace = "StackInsights.NetworkProtocol.V3";
option go_package = "stackinsights.apache.org/repo/goapi/collect/servicemesh/v3";

import "common/Common.proto";

// Define metrics report service. The metrics format is typically representing the data model collected in the service mesh case.
service ServiceMeshMetricService {
    rpc collect(stream ServiceMeshMetric) returns (MeshProbeDownstream) {
    }
}

message ServiceMeshMetric {
    // Start timestamp in milliseconds of this RPC,
    // measured between the current time and midnight, January 1, 1970 UTC.
    int64 startTime = 1;
    // End timestamp in milliseconds of this RPC,
    // measured between the current time and midnight, January 1, 1970 UTC.
    int64 endTime = 2;
    string sourceServiceName = 3;
    string sourceServiceInstance = 4;
    string destServiceName = 5;
    string destServiceInstance = 6;
    string endpoint = 7;
    int32 latency = 8;
    int32 responseCode = 9;
    // Status represents the response status of this calling.
    bool status = 10;
    Protocol protocol = 11;
    DetectPoint detectPoint = 12;
    // NONE, mTLS, or TLS
    string tlsMode = 13;
    // The sidecar/proxy internal error code, the value bases on the implementation.
    // The envoy internal error codes are listed here, https://www.envoyproxy.io/docs/envoy/latest/api-v2/data/accesslog/v2/accesslog.proto#data-accesslog-v2-responseflags
    string internalErrorCode = 14;

    // The tcp detail of the mesh metrics if it's a TCP metrics, otherwise should be empty.
    TCPInfo tcp = 15;
}

enum Protocol {
    HTTP = 0;
    gRPC = 1;
    TCP = 2;
}

message TCPInfo {
    // The received data in bytes
    int64 receivedBytes = 1;
    // The sent data in bytes
    int64 sentBytes = 2;
}

message MeshProbeDownstream {
}
